const initPostgreSQL = require("../config/db");
const { cloudinary } = require("../config/cloudinary");

const conn = initPostgreSQL();

// ‚úÖ Add Food (* admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
const createFood = async (req, res) => {
  try {
    const client = req.redis;
    const { name, category, image, price, rate } = req.body;
    let imageUrl = "/menu/noimage.jpg";
    let image_id = null;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!name || !category || !image || !price || !rate) {
      return res.status(400).json({ message: "Invalid input data" });
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á base64 image ‡∏°‡∏≤
    if (image && image !== "/menu/noimage.jpg") {
      const uploadRes = await cloudinary.uploader.upload(image, {
        upload_preset: "profile_pic2",
        folder: "restaurant/foods", // üóÇÔ∏è ‡∏£‡∏∞‡∏ö‡∏∏ path ‡∏Ç‡∏≠‡∏á folder
      });

      imageUrl = uploadRes.secure_url;
      image_id = uploadRes.public_id;
    }

    //‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ food ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°‡∏ó‡∏µ‡πà database ‡πÇ‡∏î‡∏¢‡∏°‡∏µ 2 ‡∏ß‡∏¥‡∏ò‡∏µ (**Mysql**)
    //1. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏µ‡πà database ‡πÉ‡∏´‡πâ row ‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô uniq ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞ hadle ‡∏ß‡πà‡∏≤ error (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ô‡∏µ‡πâ --> ‡∏á‡πà‡∏≤‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á code)
    //2. food ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô database ‡∏°‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°

    let sql = `INSERT INTO public.foods
            (name, category, image, image_id, price ,rate)
            VALUES($1, $2, $3, $4, $5, $6);`;

    const value = [name, category, imageUrl, image_id, price, rate];

    const response = await conn.query(sql, value);

    // ** Delete Cache data on Redis **
    await client.del("restaurant-food");

    res.json({ status: "success", data: response[0] });
  } catch (error) {
    console.log("error", error);
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ food name ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    if (error.code === "23505") {
      res.status(409).json({ message: "Duplicate food" });
    } else {
      res.status(500).json({ message: "Insert error", error });
    }
  }
};

// üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (* public/admin)
const getAllFoods = async (req, res) => {
  try {
    const client = req.redis;
    const data = await client.get("restaurant-food"); // *getFood data from redis
    if (data) {
      const response = await JSON.parse(data);
      console.log("From Redis : ", response);
      res.json({ message: "Get data on Redis", fooddata: response });
    } else {
      let sql = "select * from public.foods";
      const getfoods = await conn.query(sql);
      console.log("From Database : ", getfoods);

      // * Cache data on redis
      await client.setEx(
        "restaurant-food",
        3600,
        JSON.stringify(getfoods.rows)
      );

      res.json({ message: "Get data on Database", fooddata: getfoods.rows });
    }
  } catch (error) {
    console.log("error", error);
    res.status(500).json({ message: error });
  }
};

// üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ Id (* admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
const getFoodID = async (req, res) => {
  try {
    const client = req.redis;
    const { id } = await req.params;
    const data = await client.get("restaurant-food");
    if (data) {
      const response = await JSON.parse(data);
      const foodID = response.filter((val) => val.id == id);
      if (foodID && foodID.length > 0) {
        console.log("From Redis : ", foodID);
        return res.json({ message: "Get foodID on Redis", fooddata: foodID });
      }
    }
    let sql = "select * from public.foods where id = $1";
    const response = await conn.query(sql, [id]);
    const food = response.rows[0];
    console.log("From Database : ", food);

    // * ‡πÑ‡∏°‡πà‡∏°‡∏µ foodId ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
    if (!food) return res.status(404).json({ message: "Food ID not found" });

    await client.setEx("restaurant-food", 3600, JSON.stringify(response.rows));
    res.json({ message: "Get data on Database", fooddata: food });
  } catch (error) {
    console.log("error", error);
    res.status(500).json({ message: error });
  }
};

// üîÑ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (* admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
const updateFoodID = async (req, res) => {
  try {
    const client = req.redis;
    const { id } = req.params;
    const { name, category, image, price, rate } = req.body;
    let imageUrl = "/menu/noimage.jpg";
    let image_id = null;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!id || !name || !category || !image || !price || !rate) {
      return res.status(400).json({ message: "Invalid input data" });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ image_id
    const findSql = "SELECT * FROM public.foods WHERE id = $1";
    const findResult = await conn.query(findSql, [id]);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ data ‡πÑ‡∏´‡∏°
    if (findResult.rowCount === 0) {
      return res.status(404).json({ message: "Food not found" });
    }

    const old_image = findResult.rows[0];

    // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ noimage (‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏™‡πà‡∏á‡∏°‡∏≤)
    if (image !== "/menu/noimage.jpg" && old_image.image !== image) {
      if (old_image.image_id) {
        await cloudinary.uploader.destroy(old_image.image_id);
      }
      const uploadRes = await cloudinary.uploader.upload(image, {
        upload_preset: "profile_pic2",
        folder: "restaurant/foods", // üóÇÔ∏è ‡∏£‡∏∞‡∏ö‡∏∏ path ‡∏Ç‡∏≠‡∏á folder
      });
      imageUrl = uploadRes.url;
      image_id = uploadRes.public_id;
    } else {
      // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡πà‡∏á‡∏°‡∏≤
      imageUrl = old_image.image;
      image_id = old_image.image_id;
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏¢‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    let updateFields = [
      "name = $1",
      "category = $2",
      "image = $3",
      "image_id = $4",
      "price = $5",
      "rate = $6",
    ];
    let updateValues = [name, category, imageUrl, image_id, price, rate];
    let paramIndex = 7; // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏∏ index ‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô SQL query

    // SQL Statement ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const sql = `
      UPDATE public.foods
      SET ${updateFields.join(", ")}
      WHERE id = $${paramIndex}
    `;

    updateValues.push(id); // ‡πÄ‡∏û‡∏¥‡πà‡∏° id ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö WHERE clause

    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const response = await conn.query(sql, updateValues);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• cache ‡∏ö‡∏ô Redis
    const sql2 = "SELECT * FROM public.foods";
    const getFood = await conn.query(sql2);
    await client.setEx("restaurant-food", 3600, JSON.stringify(getFood.rows));

    res.json({ message: "Update success", updatedUser: response.rows });
  } catch (error) {
    console.error("Error updating food:", error);
    res.status(500).json({ message: "Update failed", error });
  }
};

// ‚ùå ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£ (* admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
const removeFoodID = async (req, res) => {
  try {
    const client = req.redis;
    const { id } = req.params;

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
    if (id < 43) {
      return res
        .status(403)
        .json({ message: "Cannot delete system-defined food item" });
    }

    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏•‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ image_id
    const findSql = "SELECT * FROM public.foods WHERE id = $1";
    const findResult = await conn.query(findSql, [id]);

    if (findResult.rowCount === 0) {
      return res.status(404).json({ message: "Food not found" });
    }

    const image_id = findResult.rows[0].image_id;

    // 2. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å Cloudinary ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ image_id
    if (image_id) {
      await cloudinary.uploader.destroy(image_id);
    }
    console.log("From Database :", findResult.rows[0]);

    // 3. ‡∏•‡∏ö‡∏à‡∏≤‡∏Å database
    let sql = "DELETE FROM public.foods WHERE id = $1";
    await conn.query(sql, [id]);

    //2.‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Database ‡∏°‡∏≤ cache ‡∏ö‡∏ô Redis
    let sql2 = "select * from public.foods";
    const getfood = await conn.query(sql2);
    await client.setEx("restaurant-food", 3600, JSON.stringify(getfood.rows));

    res.json({ message: "remove success" });
  } catch (error) {
    console.log("error", error);
    res.status(403).json({ message: "remove fail", error });
  }
};

module.exports = {
  createFood,
  getAllFoods,
  getFoodID,
  updateFoodID,
  removeFoodID,
};
