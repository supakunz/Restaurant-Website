// features/user/userThunk.js
import { createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

// ‡∏î‡∏∂‡∏á API URL ‡∏à‡∏≤‡∏Å .env
const URL = process.env.NEXT_PUBLIC_API_URL;

// üéØ Register ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà
export const createUser = createAsyncThunk(
  "user/createUser",
  async (userdata, { rejectWithValue }) => {
    try {
      const res = await axios.post(`${URL}/api/users/register`, userdata); // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ó‡∏µ‡πà backend
      return res.data; // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà reducer (state)
    } catch (err) {
      // ‡∏´‡∏≤‡∏Å error ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ reducer ‡∏î‡πâ‡∏ß‡∏¢ rejectWithValue
      return rejectWithValue(err.response?.data || err.message);
    }
  }
);

// üéØ Login ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
export const checkUser = createAsyncThunk(
  "user/checkUser",
  async (userdata, { rejectWithValue }) => {
    try {
      const res = await axios.post(`${URL}/api/users/login`, userdata); // ‡∏™‡πà‡∏á email/password ‡πÑ‡∏õ‡πÄ‡∏ä‡πá‡∏Ñ
      return res.data; // ‡∏ñ‡πâ‡∏≤ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏∞‡πÑ‡∏î‡πâ token ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
    } catch (err) {
      return rejectWithValue(err.response?.data || err.message); // ‡∏ñ‡πâ‡∏≤ error ‡∏Å‡πá‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    }
  }
);

// üéØ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏´‡∏•‡∏±‡∏á login ‡πÅ‡∏•‡πâ‡∏ß)
export const getUser = createAsyncThunk(
  "user/getUser",
  async (_, { getState, rejectWithValue }) => {
    try {
      // ‡∏î‡∏∂‡∏á token ‡∏à‡∏≤‡∏Å state ‡∏´‡∏£‡∏∑‡∏≠ localStorage
      const token = getState().user.token || localStorage.getItem("token");

      const res = await axios.get(`${URL}/api/users`, {
        headers: { Authorization: `Bearer ${token}` }, // ‡πÅ‡∏ô‡∏ö token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ backend ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤ login ‡πÅ‡∏•‡πâ‡∏ß
      });
      return res.data; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å token
    } catch (err) {
      return rejectWithValue(err.response?.data || err.message); // ‡∏™‡πà‡∏á error ‡∏Å‡∏•‡∏±‡∏ö
    }
  }
);
