import { createSlice } from "@reduxjs/toolkit";
import { createUser, checkUser, getUser } from "./userThunk";

// üëá State ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
const initialState = {
  user: null, // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏´‡∏•‡∏±‡∏á login ‡πÅ‡∏•‡πâ‡∏ß)
  token: typeof window !== "undefined" ? localStorage.getItem("token") : null, // token ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ
  loading: false, // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î (‡πÉ‡∏ä‡πâ‡πÇ‡∏ä‡∏ß‡πå spinner ‡πÑ‡∏î‡πâ)
  error: null, // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
  manualLogout: false,
};

// üéØ ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏Å: ‡∏™‡∏£‡πâ‡∏≤‡∏á Slice ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ user state
const userSlice = createSlice({
  name: "user",
  initialState,
  reducers: {
    // üìå Log out ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    logOut: (state) => {
      state.manualLogout = true;
      state.token = null;
      state.user = null;
      localStorage.removeItem("token"); // ‡∏•‡πâ‡∏≤‡∏á token
      localStorage.removeItem("cart"); // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    },
    // üìå Reset ‡∏Ñ‡πà‡∏≤ manualLogout
    resetManualLogout: (state) => {
      state.manualLogout = false;
    },

    // ‚úÖ Socail Login
    setUser: (state, action) => {
      state.token = action.payload.accessToken; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token
      localStorage.setItem("token", action.payload.accessToken); // ‡πÄ‡∏Å‡πá‡∏ö token ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
      state.loading = false;
    },

    setLoading: (state) => {
      state.loading = true;
    },
  },
  extraReducers: (builder) => {
    builder // (* addCase ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô addMatcher)
      // ‚úÖ Register ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      .addCase(createUser.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏°‡∏±‡∏Ñ‡∏£
      })

      // ‚úÖ Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      .addCase(checkUser.fulfilled, (state, action) => {
        state.loading = false;
        state.token = action.payload.token; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token
        localStorage.setItem("token", action.payload.token); // ‡πÄ‡∏Å‡πá‡∏ö token ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
      })

      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      .addCase(getUser.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      })

      // ‚öôÔ∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ asyncThunk ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      .addMatcher(
        (a) => a.type.endsWith("/pending"),
        (state) => {
          state.loading = true; // ‡πÅ‡∏™‡∏î‡∏á loading
          state.error = null; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå error ‡πÄ‡∏î‡∏¥‡∏°
        }
      )

      // ‚ùå ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å asyncThunk
      .addMatcher(
        (a) => a.type.endsWith("/rejected"),
        (state, action) => {
          state.loading = false;
          state.error = action.payload || "Something went wrong"; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error
        }
      );
  },
});

// üëâ Export action ‡πÅ‡∏•‡∏∞ reducer
export const { logOut, resetManualLogout, setUser, setLoading } =
  userSlice.actions;
export default userSlice.reducer;
